/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorJS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,8],$V3=[5,8,17,18],$V4=[2,5,8,10,15,17,18,42,49,54,55,56,57,58,59,60,61,67,74,75,76,77,80],$V5=[1,50],$V6=[1,49],$V7=[1,38],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,48],$Vf=[1,40],$Vg=[1,41],$Vh=[1,56],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,39],$Vn=[1,71],$Vo=[2,8,10,15,17,18,49,54,55,56,57,58,59,60,61,67,74,75,76,77,80],$Vp=[2,78],$Vq=[1,79],$Vr=[1,87],$Vs=[1,101],$Vt=[1,100],$Vu=[1,102],$Vv=[1,97],$Vw=[1,98],$Vx=[1,103],$Vy=[1,104],$Vz=[1,105],$VA=[1,106],$VB=[1,114],$VC=[10,50,80,95,100,101,102,103,104],$VD=[2,112],$VE=[2,8,10,15,17,18,49,54,55,56,57,58,60,61,67,74,75,76,77,80],$VF=[2,8,10,15,17,18,42,49,54,55,56,57,58,59,60,61,67,74,75,76,77,80],$VG=[1,146],$VH=[1,147],$VI=[1,148],$VJ=[1,149],$VK=[20,51,71,81,83,84,85],$VL=[1,150],$VM=[1,151],$VN=[20,51,71,81,83,84,85,86,88],$VO=[1,152],$VP=[1,153],$VQ=[1,154],$VR=[20,51,71,81,83,84,85,86,88,89,91,92],$VS=[1,155],$VT=[1,156],$VU=[20,51,71,81,83,84,85,86,88,89,91,92,93,95],$VV=[1,157],$VW=[1,158],$VX=[20,51,71,81,83,84,85,86,88,89,91,92,93,95,96,98],$VY=[20,51,71,78,79,81,83,84,85,86,88,89,91,92,93,95,96,98],$VZ=[20,71],$V_=[51,71],$V$=[2,107],$V01=[1,218],$V11=[1,231],$V21=[1,234],$V31=[1,242],$V41=[2,8,10,15,17,18,42,49,54,55,56,57,58,60,61,67,74,75,76,77,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"I":3,"S":4,"EOF":5,"SD":6,"CLASE_INT":7,"r_public":8,"r_class":9,"identificador":10,"BLOQUE":11,"r_interface":12,"s_llave_abre":13,"L_INSTRUCCIONES_I":14,"s_llave_cierra":15,"COMENTARIO":16,"coment_m":17,"coment_s":18,"PANICO":19,"s_pyc":20,"L_INSTRUCCIONES":21,"INSTRUCCIONES":22,"FORD":23,"CONTADOR":24,"PRINT":25,"SENTENCIA_IF":26,"SENTENCIA_WHILE":27,"SENTENCIA_DOWHILE":28,"SENTENCIA_FOR":29,"BREAK":30,"CONTINUE":31,"RETURN":32,"METODO":33,"FUNCION":34,"FUNCION_MAIN":35,"CALL_F":36,"INSTRUCCIONES_I":37,"L_INSTRUCCIONES_F":38,"INSTRUCCIONES_F":39,"L_INSTRUCCIONES_M":40,"INSTRUCCIONES_M":41,"VACIO":42,"DECLARACION":43,"ASIGNACION":44,"TIPO":45,"LISTAID":46,"=":47,"E":48,"r_if":49,"(":50,")":51,"BLOQUE_FUNCION":52,"r_else":53,"r_while":54,"r_do":55,"r_for":56,"r_break":57,"r_continue":58,"r_return":59,"r_print":60,"r_println":61,"r_void":62,"PARAMETROS":63,"BLOQUE_METODO":64,"r_static":65,"r_main":66,"r_string":67,"[":68,"]":69,"r_args":70,"s_coma":71,"IDS":72,"PARAM":73,"r_int":74,"r_char":75,"r_boolean":76,"r_double":77,"s_inc":78,"s_dec":79,"NUMBER":80,"s_mayq":81,"E2":82,"s_menq":83,"s_mayiq":84,"s_meniq":85,"s_igualdad":86,"E3":87,"s_diferencia":88,"s_xor":89,"E4":90,"s_and":91,"s_or":92,"s_mas":93,"E5":94,"s_menos":95,"s_por":96,"E6":97,"s_div":98,"E7":99,"s_not":100,"char":101,"cadena":102,"r_true":103,"r_false":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"r_public",9:"r_class",10:"identificador",12:"r_interface",13:"s_llave_abre",15:"s_llave_cierra",17:"coment_m",18:"coment_s",20:"s_pyc",42:"VACIO",47:"=",49:"r_if",50:"(",51:")",53:"r_else",54:"r_while",55:"r_do",56:"r_for",57:"r_break",58:"r_continue",59:"r_return",60:"r_print",61:"r_println",62:"r_void",65:"r_static",66:"r_main",67:"r_string",68:"[",69:"]",70:"r_args",71:"s_coma",74:"r_int",75:"r_char",76:"r_boolean",77:"r_double",78:"s_inc",79:"s_dec",80:"NUMBER",81:"s_mayq",83:"s_menq",84:"s_mayiq",85:"s_meniq",86:"s_igualdad",88:"s_diferencia",89:"s_xor",91:"s_and",92:"s_or",93:"s_mas",95:"s_menos",96:"s_por",98:"s_div",100:"s_not",101:"char",102:"cadena",103:"r_true",104:"r_false"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,4],[7,6],[7,1],[16,1],[16,1],[19,2],[19,2],[21,2],[21,1],[22,2],[22,2],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[14,2],[14,1],[38,2],[38,1],[40,2],[40,1],[37,2],[37,2],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[41,2],[41,1],[41,2],[41,2],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[39,2],[39,2],[39,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[23,1],[23,1],[43,2],[44,3],[44,1],[26,5],[26,7],[26,7],[27,5],[28,7],[29,9],[30,2],[31,2],[32,3],[25,4],[25,4],[33,7],[33,8],[34,7],[35,11],[35,8],[36,7],[36,7],[11,3],[64,3],[52,3],[46,3],[46,1],[72,3],[72,1],[63,3],[63,1],[73,2],[73,0],[45,1],[45,1],[45,1],[45,1],[45,1],[24,2],[24,2],[24,2],[24,2],[48,3],[48,3],[48,3],[48,3],[48,1],[82,3],[82,3],[82,1],[87,3],[87,3],[87,3],[87,1],[90,3],[90,3],[90,1],[94,3],[94,3],[94,1],[97,2],[97,2],[97,2],[97,2],[97,1],[99,3],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var listaE = lista_error;
                 lista_error = [];
                 contadorE = 0;
                 var listaT = lista_tokens;
                 lista_tokens = [];
                 contadorT = 0;
                 return {ast: $$[$0-1], tabla_errores: listaE,tabla_tokens:listaT};
break;
case 2:
this.$ = $$[$0]; 
break;
case 3: case 12: case 30: case 32: case 34:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 13: case 31: case 33: case 35: case 101: case 105:
this.$ = [$$[$0]];
break;
case 5:
this.$ = new Clase.default($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 6:
this.$ = new Interface.default($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 7: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 78:
this.$ = $$[$0];
break;
case 8: case 9:
this.$ = new Comentario.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 10:

        contadorE++;
        lista_error.push([contadorE,yytext,this._$.first_line,this._$.first_column,"Sintactico"]);
                                
break;
case 11:

        contadorE++;
        lista_error.push([contadorE,yytext,this._$.first_line,this._$.first_column,"Sintactico"]);
        
break;
case 14: case 15: case 16: case 36: case 37: case 38: case 48: case 50: case 51: case 61: case 62: case 63: case 97: case 98: case 99:
this.$ = $$[$0-1];
break;
case 76:
 this.$ = new Declaracion.default($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 77:
this.$ = new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
 this.$ = new If.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 80: case 81:
 this.$ = new If.default($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 82:
 this.$ = new While.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 83:
 this.$ = new Do_While.default($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 84:
this.$ = new For.default($$[$0-6], $$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 85:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 86:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 87:
this.$ = new Return.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88: case 89:
 this.$ = new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 90:
this.$ = new Metodo.default($$[$0-4],$$[$0-2],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 91:
this.$ = new EmptyM.default($$[$0-5],$$[$0-3], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 92:
this.$ = new Funcion.default($$[$0-5],$$[$0-4],$$[$0-2],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 93:
this.$ = new Main.default($$[$0], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 94:
this.$ = new Funcion_Main.default($$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 95: case 96:
this.$ = new Call_Function.default($$[$0-5],$$[$0-4],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 100:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; console.log("LISTAID:"+this.$);
break;
case 102:
this.$ = new Lista_ID.default($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);console.log("ID:"+$$[$0-2]);console.log("ID:"+$$[$0]);
break;
case 103:
this.$ = new Identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);console.log("ID:"+$$[$0]);
break;
case 104:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 106:
this.$ = new Parametros.default($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 107:
this.$ = new Excepcion.default("VACIO",_$[$0].first_line, _$[$0].first_column);
break;
case 108: case 109: case 110: case 111: case 112:
this.$ = $$[$0]
break;
case 113:
this.$ = new Contador.default('++', $$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 114:
this.$ = new Contador.default('--', $$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 115:
this.$ = new Contador.default('++',$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 116:
this.$ = new Contador.default('--',$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 117:
this.$ = new Relacional.default($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 118:
this.$ = new Relacional.default($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
this.$ = new Relacional.default($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 120:
this.$ = new Relacional.default($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 121: case 124: case 128: case 131: case 134: case 139:
this.$ =$$[$0]
break;
case 122:
this.$ = new Relacional.default($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 123:
this.$ = new Relacional.default($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 125:
this.$ = new Logica.default($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 126:
this.$ = new Logica.default($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
this.$ = new Logica.default($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 129:
this.$ = new Aritmetica.default('+', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 130:
this.$ = new Aritmetica.default('-', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 132:
  this.$ = new Aritmetica.default('*', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 133:
  this.$ = new Aritmetica.default('/', _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2], $$[$0]);
break;
case 135:
 this.$ = new Aritmetica.default('-', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 136:
  this.$ = new Logica.default('!', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 137:
  this.$ = new Aritmetica.default('++', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 138:
  this.$ = new Aritmetica.default('--', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 140:
 this.$ = new Parentesis.default($$[$0-2],$$[$0-1],$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 141:
 this.$ = new Identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 142: case 143: case 144: case 145: case 146:
this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,16:6,17:$V1,18:$V2},{1:[3]},{5:[1,9]},{5:[2,2],7:10,8:$V0,16:6,17:$V1,18:$V2},o($V3,[2,4]),{9:[1,11],12:[1,12]},o($V3,[2,7]),o($V4,[2,8]),o($V4,[2,9]),{1:[2,1]},o($V3,[2,3]),{10:[1,13]},{10:[1,14]},{11:15,13:[1,16]},{13:[1,17]},o($V3,[2,5]),{2:$V5,8:$V6,10:$V7,16:34,17:$V1,18:$V2,19:35,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:33,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},{2:$V5,8:$Vn,10:$V7,14:57,16:69,17:$V1,18:$V2,19:70,23:59,24:60,25:61,26:62,27:63,28:64,29:65,30:66,31:67,36:68,37:58,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},{2:$V5,8:$V6,10:$V7,15:[1,72],16:34,17:$V1,18:$V2,19:35,22:73,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:31,35:32,36:33,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},o($Vo,[2,13]),{20:[1,74]},{20:[1,75]},{20:[1,76]},o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),{20:[2,74]},{20:[2,75]},{20:$Vp,47:$Vq,78:[1,77],79:[1,78]},{78:[1,80],79:[1,81]},{50:[1,82]},{50:[1,83]},{50:[1,84]},{50:[1,85]},{13:$Vr,52:86},{50:[1,88]},{20:[1,89]},{20:[1,90]},{10:$Vs,48:91,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{45:108,62:[1,107],65:[1,109],67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl},{15:[1,111],20:[1,110]},{10:$VB,46:112,72:113},o($VC,[2,108]),o($VC,[2,109]),o($VC,[2,110]),o($VC,[2,111]),o($VC,$VD),{2:$V5,8:$Vn,10:$V7,15:[1,115],16:69,17:$V1,18:$V2,19:70,23:59,24:60,25:61,26:62,27:63,28:64,29:65,30:66,31:67,36:68,37:116,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},o($VE,[2,31]),{20:[1,117]},{20:[1,118]},{20:[1,119]},o($VE,[2,39]),o($VE,[2,40]),o($VE,[2,41]),o($VE,[2,42]),o($VE,[2,43]),o($VE,[2,44]),o($VE,[2,45]),o($VE,[2,46]),o($VE,[2,47]),{45:120,62:[1,121],67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl},o($V3,[2,97]),o($Vo,[2,12]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),{20:[2,113]},{20:[2,114]},{10:$Vs,48:122,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{20:[2,115]},{20:[2,116]},{10:$Vs,48:123,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,48:124,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,48:125,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,48:126,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{54:[1,127]},{2:$V5,8:$Vn,10:$V7,16:141,17:$V1,18:$V2,19:142,23:130,24:131,25:132,26:133,27:134,28:135,29:136,30:137,31:138,32:139,36:140,38:128,39:129,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},{10:[1,144],23:143,43:36,44:37,45:51,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl},o($VF,[2,85]),o($VF,[2,86]),{20:[1,145],81:$VG,83:$VH,84:$VI,85:$VJ},o($VK,[2,121],{86:$VL,88:$VM}),o($VN,[2,124],{89:$VO,91:$VP,92:$VQ}),o($VR,[2,128],{93:$VS,95:$VT}),o($VU,[2,131],{96:$VV,98:$VW}),o($VX,[2,134]),{10:$Vs,50:$Vt,80:$Vu,99:159,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,99:160,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VX,[2,139],{78:[1,161],79:[1,162]}),{10:$Vs,48:163,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VY,[2,141]),o($VY,[2,142]),o($VY,[2,143]),o($VY,[2,144]),o($VY,[2,145]),o($VY,[2,146]),{10:[1,164]},{10:[1,165]},{62:[1,166]},o($VF,[2,10]),o($VF,[2,11]),{20:[2,76],71:[1,167]},o($VZ,[2,101]),o($VZ,[2,103],{47:[1,168]}),o($V3,[2,6]),o($VE,[2,30]),o($VE,[2,36]),o($VE,[2,37]),o($VE,[2,38]),{10:[1,169]},{10:[1,170]},{20:[2,77],81:$VG,83:$VH,84:$VI,85:$VJ},{51:[1,171],81:$VG,83:$VH,84:$VI,85:$VJ},{51:[1,172],81:$VG,83:$VH,84:$VI,85:$VJ},{51:[1,173],81:$VG,83:$VH,84:$VI,85:$VJ},{51:[1,174],81:$VG,83:$VH,84:$VI,85:$VJ},{50:[1,175]},{2:$V5,8:$Vn,10:$V7,15:[1,176],16:141,17:$V1,18:$V2,19:142,23:130,24:131,25:132,26:133,27:134,28:135,29:136,30:137,31:138,32:139,36:140,39:177,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},o($Vo,[2,33]),{20:[1,178]},{20:[1,179]},{20:[1,180]},o($Vo,[2,64]),o($Vo,[2,65]),o($Vo,[2,66]),o($Vo,[2,67]),o($Vo,[2,68]),o($Vo,[2,69]),o($Vo,[2,70]),o($Vo,[2,71]),o($Vo,[2,72]),o($Vo,[2,73]),{20:[1,181]},{20:$Vp,47:$Vq},o($Vo,[2,87]),{10:$Vs,50:$Vt,80:$Vu,82:182,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,82:183,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,82:184,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,82:185,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,87:186,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,87:187,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,90:188,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,90:189,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,90:190,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,94:191,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,94:192,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,95:$Vv,97:193,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{10:$Vs,50:$Vt,80:$Vu,95:$Vv,97:194,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VX,[2,135]),o($VX,[2,136]),o($VX,[2,137]),o($VX,[2,138]),{51:[1,195],81:$VG,83:$VH,84:$VI,85:$VJ},{50:[1,196]},{50:[1,197]},{66:[1,198]},{10:$VB,72:199},{10:$Vs,48:200,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{50:[1,201]},{50:[1,202]},{20:[2,88]},{20:[2,89]},{13:$Vr,52:203},{13:$Vr,52:204},{10:$Vs,48:205,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o([2,8,10,15,17,18,42,49,53,54,55,56,57,58,59,60,61,67,74,75,76,77,80],[2,99]),o($Vo,[2,32]),o($Vo,[2,61]),o($Vo,[2,62]),o($Vo,[2,63]),{10:$Vs,48:206,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VK,[2,117],{86:$VL,88:$VM}),o($VK,[2,118],{86:$VL,88:$VM}),o($VK,[2,119],{86:$VL,88:$VM}),o($VK,[2,120],{86:$VL,88:$VM}),o($VN,[2,122],{89:$VO,91:$VP,92:$VQ}),o($VN,[2,123],{89:$VO,91:$VP,92:$VQ}),o($VR,[2,125],{93:$VS,95:$VT}),o($VR,[2,126],{93:$VS,95:$VT}),o($VR,[2,127],{93:$VS,95:$VT}),o($VU,[2,129],{96:$VV,98:$VW}),o($VU,[2,130],{96:$VV,98:$VW}),o($VX,[2,132]),o($VX,[2,133]),o($VY,[2,140]),o($V_,$V$,{63:207,73:208,45:209,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl}),o($V_,$V$,{73:208,45:209,63:210,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl}),{50:[1,211]},o($VZ,[2,100]),o($VZ,[2,102],{81:$VG,83:$VH,84:$VI,85:$VJ}),o($V_,$V$,{73:208,45:209,63:212,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl}),o($V_,$V$,{73:208,45:209,63:213,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl}),o($VF,[2,79],{53:[1,214]}),o($VF,[2,82]),{51:[1,215],81:$VG,83:$VH,84:$VI,85:$VJ},{20:[1,216],81:$VG,83:$VH,84:$VI,85:$VJ},{51:[1,217],71:$V01},o($V_,[2,105]),{10:$Vs,48:219,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{51:[1,220],71:$V01},o($V_,$V$,{73:208,45:209,63:222,67:[1,221],74:$Vi,75:$Vj,76:$Vk,77:$Vl}),{51:[1,223],71:$V01},{51:[1,224],71:$V01},{13:$Vr,26:226,49:$V8,52:225},{20:[1,227]},{10:$Vs,48:228,50:$Vt,80:$Vu,82:92,87:93,90:94,94:95,95:$Vv,97:96,99:99,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{13:[1,230],20:$V11,64:229},o($V_,$V$,{45:209,73:232,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl}),o($V_,[2,106],{81:$VG,83:$VH,84:$VI,85:$VJ}),{13:$Vr,20:$V21,52:233},o($VC,$VD,{68:[1,235]}),{51:[1,236],71:$V01},{20:$V21},{20:$V11},o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,83]),{51:[1,237],81:$VG,83:$VH,84:$VI,85:$VJ},o($Vo,[2,90]),{2:$V5,8:$Vn,10:$V7,15:[1,238],16:252,17:$V1,18:$V2,19:253,23:241,24:243,25:244,26:245,27:246,28:247,29:248,30:249,31:250,36:251,40:239,41:240,42:$V31,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},o($VF,[2,96]),o($V_,[2,104]),o($Vo,[2,92]),o($VF,[2,95]),{69:[1,254]},{13:$Vr,52:255},{13:$Vr,52:256},o($Vo,[2,91]),{2:$V5,8:$Vn,10:$V7,15:[1,257],16:252,17:$V1,18:$V2,19:253,23:241,24:243,25:244,26:245,27:246,28:247,29:248,30:249,31:250,36:251,41:258,42:$V31,43:36,44:37,45:51,49:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vd,60:$Vf,61:$Vg,67:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm},o($V41,[2,35]),{20:[1,259]},o($V41,[2,49]),{20:[1,260]},{20:[1,261]},o($V41,[2,52]),o($V41,[2,53]),o($V41,[2,54]),o($V41,[2,55]),o($V41,[2,56]),o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),{70:[1,262]},o($Vo,[2,94]),o($VF,[2,84]),o($Vo,[2,98]),o($V41,[2,34]),o($V41,[2,48]),o($V41,[2,50]),o($V41,[2,51]),{51:[1,263]},{13:$Vr,52:264},o($Vo,[2,93])],
defaultActions: {9:[2,1],36:[2,74],37:[2,75],77:[2,113],78:[2,114],80:[2,115],81:[2,116],171:[2,88],172:[2,89]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var contadorE = 0;
        var contadorT = 0;
        var lista_error  = new Array();
        var lista_tokens = new Array();
        
          
    //EXPRESIONES
    const Aritmetica         = require('./Expresiones/Aritmetica');
    const Contador           = require('./Expresiones/Contador');
    const Identificador      = require('./Expresiones/Identificador');
    const Logica             = require('./Expresiones/Logica');
    const Parentesis         = require('./Expresiones/Parentesis');
    const Primitivo          = require('./Expresiones/Primitivo');
    const Relacional         = require('./Expresiones/Relacional');
    //INSTRUCCIONES
    const Asignacion         = require('./Instrucciones/Asignacion');
    const Break              = require('./Instrucciones/Break');
    const Call_Function      = require('./Instrucciones/Call_Function');
    const Clase              = require('./Instrucciones/Clase');
    const Comentario         = require('./Instrucciones/Comentario');
    const Continue           = require('./Instrucciones/Continue');
    const Declaracion        = require('./Instrucciones/Declaracion');
    const Do_While           = require('./Instrucciones/Do_While');
    const Excepcion          = require('./Instrucciones/Excepcion');
    const EmptyM             = require('./Instrucciones/EmptyM');
    const For                = require('./Instrucciones/For');
    const Funcion_Main       = require('./Instrucciones/Funcion_Main');
    const Funcion            = require('./Instrucciones/Funcion');
    const If                 = require('./Instrucciones/If');
    const Interface          = require('./Instrucciones/Interface');
    const Lista_ID          = require('./Instrucciones/Lista_ID');
    const Main               = require('./Instrucciones/Main');
    const Metodo             = require('./Instrucciones/Metodo');
    const Parametros         = require('./Instrucciones/Parametros');
    const Print              = require('./Instrucciones/Print');
    const Return              = require('./Instrucciones/Return');
    const While              = require('./Instrucciones/While');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Comentario Simple",yy_.yytext]);
        return 18;
break;
case 2:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Comentario Multiple",yy_.yytext]);
        return 17;
        
break;
case 3:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Int",yy_.yytext]);
        return 74;
        
break;
case 4:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Double",yy_.yytext]);
        return 77;
        
break;
case 5:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Char",yy_.yytext]);
        return 75;
        
break;
case 6:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Boolean",yy_.yytext]);
        return 76;
        
break;
case 7:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"String",yy_.yytext]);
        return 67;
        
break;
case 8:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Static",yy_.yytext]);
        return 65;
        
break;
case 9:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Args",yy_.yytext]);
        return 70;
        
break;
case 10:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Void",yy_.yytext]);
        return 62;
        
break;
case 11:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Main",yy_.yytext]);
        return 66;
        
break;
case 12:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"If",yy_.yytext]);
        return 49;
        
break;
case 13:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Break",yy_.yytext]);
        return 57;
        
break;
case 14:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Continue",yy_.yytext]);
        return 58;
        
break;
case 15:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Return",yy_.yytext]);
        return 59;
        
break;
case 16:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Else",yy_.yytext]);
        return 53;
        
break;
case 17:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"True",yy_.yytext]);
        return 103;
        
break;
case 18:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"False",yy_.yytext]);
        return 104;
        
break;
case 19:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"For",yy_.yytext]);
        return 56;
        
break;
case 20:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Public",yy_.yytext]);
        return 8;
        
break;
case 21:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Class",yy_.yytext]);
        return 9;
        
break;
case 22:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Interface",yy_.yytext]);
        return 12;
        
break;
case 23:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"While",yy_.yytext]);
        return 54;
        
break;
case 24:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Do",yy_.yytext]);
        return 55;
        
break;
case 25:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Print",yy_.yytext]);
        return 60;
        
break;
case 26:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Print",yy_.yytext]);
        return 61;
        
break;
case 27:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"And",yy_.yytext]);
        return 91;
        
break;
case 28:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Or",yy_.yytext]);
        return 92;
        
break;
case 29:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Diferencia",yy_.yytext]);
        return 88;
        
break;
case 30:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Not",yy_.yytext]);
        return 100;
        
break;
case 31:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Xor",yy_.yytext]);
        return 89;
        
break;
case 32:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MenIq",yy_.yytext]);
        return 85;
        
break;
case 33:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MayIq",yy_.yytext]);
        return 84;
        
break;
case 34:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Igualdad",yy_.yytext]);
        return 86;
        
break;
case 35:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MenQ",yy_.yytext]);
        return 83;
        
break;
case 36:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MayQ",yy_.yytext]);
        return 81;
        
break;
case 37:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Igual",yy_.yytext]);
        return 47;
        
break;
case 38:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Punto_Coma",yy_.yytext]);
        return 20;
        
break;
case 39:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Coma",yy_.yytext]);
        return 71;
        
break;
case 40:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Dos Puntos",yy_.yytext]);
        return 's_dpuntos';
        
break;
case 41:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Punto",yy_.yytext]);
        return '.';
        
break;
case 42:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Incremento",yy_.yytext]);
        return 78;
        
break;
case 43:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Decremento",yy_.yytext]);
        return 79;
        
break;
case 44:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Por",yy_.yytext]);
        return 96;
        
break;
case 45:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Div",yy_.yytext]);
        return 98;
        
break;
case 46:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Menos",yy_.yytext]);
        return 95;
        
break;
case 47:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Mas",yy_.yytext]);
        return 93;
        
break;
case 48:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"ParA",yy_.yytext]);
        return 50;
        
break;
case 49:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"ParC",yy_.yytext]);
        return 51;
        
break;
case 50:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"CorcA",yy_.yytext]);
        return 68;
        
break;
case 51:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"CorcC",yy_.yytext]);
        return 69;
        
break;
case 52:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"LlaveA",yy_.yytext]);
        return 13;
        
break;
case 53:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"LlaveC",yy_.yytext]);
        return 15;
        
break;
case 54:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexNumero",yy_.yytext]);
        return 80;
        
break;
case 55:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexString",yy_.yytext]);
        return 102;
        
break;
case 56:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexChar",yy_.yytext]);
        return 101;
        
break;
case 57:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexID",yy_.yytext]);
        return 10;
        
break;
case 58:return 5;
break;
case 59:                         
                contadorE++;
                lista_error.push([contadorE,yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,"Lexico"]);
        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:static\b)/i,/^(?:args\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:System\.out\.print\b)/i,/^(?:System\.out\.println\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:[a-zA-Z]+[a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorJS;
exports.Parser = analizadorJS.Parser;
exports.parse = function () { return analizadorJS.parse.apply(analizadorJS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}