/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorJS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,8],$V3=[5,8,17,18],$V4=[2,5,8,10,15,17,18,43,50,55,56,57,58,59,60,61,62,68,75,76,77,78,79,82],$V5=[1,53],$V6=[1,52],$V7=[1,41],$V8=[1,45],$V9=[1,46],$Va=[1,47],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,43],$Vg=[1,44],$Vh=[1,59],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,40],$Vn=[1,42],$Vo=[1,75],$Vp=[2,8,10,15,17,18,50,55,56,57,58,59,60,61,62,68,75,76,77,78,79,82],$Vq=[2,80],$Vr=[1,85],$Vs=[1,93],$Vt=[1,107],$Vu=[1,106],$Vv=[1,103],$Vw=[1,108],$Vx=[1,104],$Vy=[1,109],$Vz=[1,110],$VA=[1,111],$VB=[1,112],$VC=[1,120],$VD=[10,51,79,82,101,102,103,104,105],$VE=[2,117],$VF=[2,8,10,15,17,18,50,55,56,57,58,59,61,62,68,75,76,77,78,79,82],$VG=[2,8,10,15,17,18,43,50,55,56,57,58,59,60,61,62,68,75,76,77,78,79,82],$VH=[1,156],$VI=[1,157],$VJ=[1,158],$VK=[1,159],$VL=[20,52,72,83,85,86,87],$VM=[1,160],$VN=[1,161],$VO=[20,52,72,83,85,86,87,88,90],$VP=[1,162],$VQ=[1,163],$VR=[1,164],$VS=[20,52,72,83,85,86,87,88,90,91,93,94],$VT=[1,166],$VU=[1,165],$VV=[20,52,72,79,83,85,86,87,88,90,91,93,94,95],$VW=[1,167],$VX=[1,168],$VY=[20,52,72,79,83,85,86,87,88,90,91,93,94,95,97,99],$VZ=[20,52,72,79,80,81,83,85,86,87,88,90,91,93,94,95,97,99],$V_=[20,72],$V$=[52,72],$V01=[2,112],$V11=[1,228],$V21=[1,241],$V31=[1,245],$V41=[1,253],$V51=[2,8,10,15,17,18,43,50,55,56,57,58,59,61,62,68,75,76,77,78,79,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"I":3,"S":4,"EOF":5,"SD":6,"CLASE_INT":7,"r_public":8,"r_class":9,"identificador":10,"BLOQUE":11,"r_interface":12,"BLOQUE_I":13,"s_llave_abre":14,"s_llave_cierra":15,"COMENTARIO":16,"coment_m":17,"coment_s":18,"PANICO":19,"s_pyc":20,"L_INSTRUCCIONES":21,"INSTRUCCIONES":22,"L_INSTRUCCIONES_I":23,"INSTRUCCIONES_I":24,"L_INSTRUCCIONES_F":25,"INSTRUCCIONES_F":26,"L_INSTRUCCIONES_M":27,"INSTRUCCIONES_M":28,"FORD":29,"CONTADOR":30,"PRINT":31,"SENTENCIA_IF":32,"SENTENCIA_WHILE":33,"SENTENCIA_DOWHILE":34,"SENTENCIA_FOR":35,"BREAK":36,"CONTINUE":37,"RETURN":38,"METODO":39,"FUNCION":40,"FUNCION_MAIN":41,"CALL_F":42,"VACIO":43,"DECLARACION":44,"ASIGNACION":45,"TIPO":46,"LISTAID":47,"=":48,"E":49,"r_if":50,"(":51,")":52,"BLOQUE_FUNCION":53,"r_else":54,"r_while":55,"r_do":56,"r_for":57,"r_break":58,"r_continue":59,"r_return":60,"r_print":61,"r_println":62,"r_void":63,"PARAMETROS":64,"BLOQUE_METODO":65,"r_static":66,"r_main":67,"r_string":68,"[":69,"]":70,"r_args":71,"s_coma":72,"IDS":73,"PARAM":74,"r_int":75,"r_char":76,"r_boolean":77,"r_double":78,"s_menos":79,"s_inc":80,"s_dec":81,"NUMBER":82,"s_mayq":83,"E2":84,"s_menq":85,"s_mayiq":86,"s_meniq":87,"s_igualdad":88,"E3":89,"s_diferencia":90,"s_xor":91,"E4":92,"s_and":93,"s_or":94,"s_mas":95,"E5":96,"s_por":97,"E6":98,"s_div":99,"E7":100,"s_not":101,"char":102,"cadena":103,"r_true":104,"r_false":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"r_public",9:"r_class",10:"identificador",12:"r_interface",14:"s_llave_abre",15:"s_llave_cierra",17:"coment_m",18:"coment_s",20:"s_pyc",43:"VACIO",48:"=",50:"r_if",51:"(",52:")",54:"r_else",55:"r_while",56:"r_do",57:"r_for",58:"r_break",59:"r_continue",60:"r_return",61:"r_print",62:"r_println",63:"r_void",66:"r_static",67:"r_main",68:"r_string",69:"[",70:"]",71:"r_args",72:"s_coma",75:"r_int",76:"r_char",77:"r_boolean",78:"r_double",79:"s_menos",80:"s_inc",81:"s_dec",82:"NUMBER",83:"s_mayq",85:"s_menq",86:"s_mayiq",87:"s_meniq",88:"s_igualdad",90:"s_diferencia",91:"s_xor",93:"s_and",94:"s_or",95:"s_mas",97:"s_por",99:"s_div",101:"s_not",102:"char",103:"cadena",104:"r_true",105:"r_false"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,4],[7,4],[7,5],[7,5],[7,1],[16,1],[16,1],[19,2],[19,2],[21,2],[21,1],[23,2],[23,1],[25,2],[25,1],[27,2],[27,1],[22,2],[22,2],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[24,2],[24,2],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[28,2],[28,1],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[26,2],[26,2],[26,2],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[29,1],[29,1],[44,2],[45,3],[45,1],[32,5],[32,7],[32,7],[33,5],[34,7],[35,9],[36,2],[37,2],[38,3],[31,4],[31,4],[39,7],[39,8],[40,7],[40,8],[41,11],[41,8],[41,9],[42,7],[42,7],[11,3],[13,3],[65,3],[53,3],[47,3],[47,1],[73,3],[73,1],[64,3],[64,1],[74,2],[74,0],[46,1],[46,1],[46,1],[46,1],[46,1],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,2],[49,3],[49,3],[49,3],[49,3],[49,1],[84,3],[84,3],[84,1],[89,3],[89,3],[89,3],[89,1],[92,3],[92,3],[92,1],[96,3],[96,3],[96,1],[98,2],[98,2],[98,2],[98,2],[98,1],[100,3],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var listaE = lista_error;
                 lista_error = [];
                 contadorE = 0;
                 var listaT = lista_tokens;
                 lista_tokens = [];
                 contadorT = 0;
                 return {ast: $$[$0-1], tabla_errores: listaE,tabla_tokens:listaT};
break;
case 2:
this.$ = $$[$0]; 
break;
case 3: case 14: case 16: case 18: case 20:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 15: case 17: case 19: case 21: case 106: case 110:
this.$ = [$$[$0]];
break;
case 5:
this.$ = new Clase.default($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 6:
this.$ = new Interface.default($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 7:
this.$ = new EmptyC.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 8:
this.$ = new EmptyI.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 9: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 80:
this.$ = $$[$0];
break;
case 10: case 11:
this.$ = new Comentario.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 12:

        contadorE++;
        lista_error.push([contadorE,yytext,this._$.first_line,this._$.first_column,"Sintactico"]);
                                
break;
case 13:

        contadorE++;
        lista_error.push([contadorE,yytext,this._$.first_line,this._$.first_column,"Sintactico"]);
        
break;
case 22: case 23: case 24: case 38: case 39: case 40: case 50: case 52: case 53: case 63: case 64: case 65: case 101: case 102: case 103: case 104:
this.$ = $$[$0-1];
break;
case 78:
 this.$ = new Declaracion.default($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 79:
this.$ = new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
 this.$ = new If.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 82: case 83:
 this.$ = new If.default($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 84:
 this.$ = new While.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 85:
 this.$ = new Do_While.default($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 86:
this.$ = new For.default($$[$0-6], $$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 87:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 88:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 89:
this.$ = new Return.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90: case 91:
 this.$ = new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 92:
this.$ = new Metodo.default($$[$0-4],$$[$0-2],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 93:
this.$ = new EmptyM.default($$[$0-5],$$[$0-3], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 94:
this.$ = new Funcion.default($$[$0-5],$$[$0-4],$$[$0-2],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 95:
this.$ = new EmptyF.default($$[$0-6],$$[$0-5],$$[$0-3], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 96:
this.$ = new Main.default($$[$0], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 97:
this.$ = new Funcion_Main.default($$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 98:
this.$ = new EmptyFM.default($$[$0-3], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 99: case 100:
this.$ = new Call_Function.default($$[$0-5],$$[$0-4],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 105:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; console.log("LISTAID:"+this.$);
break;
case 107:
this.$ = new Lista_ID.default($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);console.log("ID:"+$$[$0-2]);console.log("ID:"+$$[$0]);
break;
case 108:
this.$ = new Identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);console.log("ID:"+$$[$0]);
break;
case 109:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 111:
this.$ = new Parametros.default($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 112:
this.$ = new Excepcion.default("VACIO",_$[$0].first_line, _$[$0].first_column);
break;
case 113: case 114: case 115: case 116: case 117:
this.$ = $$[$0]
break;
case 118: case 120:
this.$ = new Nega_Contador.default('-','++', $$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119: case 121:
this.$ = new Nega_Contador.default('-','--', $$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 122:
this.$ = new Contador.default('++', $$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 123:
this.$ = new Contador.default('--', $$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 124:
this.$ = new Contador.default('++',$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 125:
this.$ = new Contador.default('--',$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 126:
this.$ = new Relacional.default($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
this.$ = new Relacional.default($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 128:
this.$ = new Relacional.default($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 129:
this.$ = new Relacional.default($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 130: case 133: case 137: case 140: case 143: case 148:
this.$ =$$[$0]
break;
case 131:
this.$ = new Relacional.default($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 132:
this.$ = new Relacional.default($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 134:
this.$ = new Logica.default($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 135:
this.$ = new Logica.default($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 136:
this.$ = new Logica.default($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 138:
this.$ = new Aritmetica.default('+', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 139:
this.$ = new Aritmetica.default('-', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 141:
  this.$ = new Aritmetica.default('*', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 142:
  this.$ = new Aritmetica.default('/', _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2], $$[$0]);
break;
case 144:
 this.$ = new Aritmetica.default('-', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 145:
  this.$ = new Logica.default('!', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 146:
  this.$ = new Aritmetica.default('++', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 147:
  this.$ = new Aritmetica.default('--', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 149:
 this.$ = new Parentesis.default($$[$0-2],$$[$0-1],$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 150:
 this.$ = new Identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 151: case 152: case 153: case 154: case 155:
this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,16:6,17:$V1,18:$V2},{1:[3]},{5:[1,9]},{5:[2,2],7:10,8:$V0,16:6,17:$V1,18:$V2},o($V3,[2,4]),{9:[1,11],12:[1,12]},o($V3,[2,9]),o($V4,[2,10]),o($V4,[2,11]),{1:[2,1]},o($V3,[2,3]),{10:[1,13]},{10:[1,14]},{11:15,14:[1,16]},{13:17,14:[1,18]},o($V3,[2,5]),{2:$V5,8:$V6,10:$V7,15:[1,19],16:36,17:$V1,18:$V2,19:37,21:20,22:21,29:22,30:23,31:24,32:25,33:26,34:27,35:28,36:29,37:30,38:31,39:32,40:33,41:34,42:35,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($V3,[2,6]),{2:$V5,8:$Vo,10:$V7,15:[1,60],16:73,17:$V1,18:$V2,19:74,23:61,24:62,29:63,30:64,31:65,32:66,33:67,34:68,35:69,36:70,37:71,42:72,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($V3,[2,7]),{2:$V5,8:$V6,10:$V7,15:[1,76],16:36,17:$V1,18:$V2,19:37,22:77,29:22,30:23,31:24,32:25,33:26,34:27,35:28,36:29,37:30,38:31,39:32,40:33,41:34,42:35,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($Vp,[2,15]),{20:[1,78]},{20:[1,79]},{20:[1,80]},o($Vp,[2,25]),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),o($Vp,[2,30]),o($Vp,[2,31]),o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,34]),o($Vp,[2,35]),o($Vp,[2,36]),o($Vp,[2,37]),{20:[2,76]},{20:[2,77]},{10:[1,81],82:[1,82]},{20:$Vq,48:$Vr,80:[1,83],81:[1,84]},{80:[1,86],81:[1,87]},{51:[1,88]},{51:[1,89]},{51:[1,90]},{51:[1,91]},{14:$Vs,53:92},{51:[1,94]},{20:[1,95]},{20:[1,96]},{10:$Vt,49:97,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{46:114,63:[1,113],66:[1,115],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:[1,117],20:[1,116]},{10:$VC,47:118,73:119},o($VD,[2,113]),o($VD,[2,114]),o($VD,[2,115]),o($VD,[2,116]),o($VD,$VE),o($V3,[2,8]),{2:$V5,8:$Vo,10:$V7,15:[1,121],16:73,17:$V1,18:$V2,19:74,24:122,29:63,30:64,31:65,32:66,33:67,34:68,35:69,36:70,37:71,42:72,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($VF,[2,17]),{20:[1,123]},{20:[1,124]},{20:[1,125]},o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),{46:126,63:[1,127],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($V3,[2,101]),o($Vp,[2,14]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),{80:[1,128],81:[1,129]},{80:[1,130],81:[1,131]},{20:[2,122]},{20:[2,123]},{10:$Vt,49:132,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{20:[2,124]},{20:[2,125]},{10:$Vt,49:133,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,49:134,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,49:135,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,49:136,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{55:[1,137]},{2:$V5,8:$Vo,10:$V7,16:151,17:$V1,18:$V2,19:152,25:138,26:139,29:140,30:141,31:142,32:143,33:144,34:145,35:146,36:147,37:148,38:149,42:150,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},{10:[1,154],29:153,44:38,45:39,46:54,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VG,[2,87]),o($VG,[2,88]),{20:[1,155],83:$VH,85:$VI,86:$VJ,87:$VK},o($VL,[2,130],{88:$VM,90:$VN}),o($VO,[2,133],{91:$VP,93:$VQ,94:$VR}),o($VS,[2,137],{79:$VT,95:$VU}),o($VV,[2,140],{97:$VW,99:$VX}),o($VY,[2,143]),{10:$Vt,51:$Vu,82:$Vw,100:169,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,82:$Vw,100:170,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VY,[2,148],{80:[1,171],81:[1,172]}),{10:$Vt,49:173,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VZ,[2,150]),o($VZ,[2,151]),o($VZ,[2,152]),o($VZ,[2,153]),o($VZ,[2,154]),o($VZ,[2,155]),{10:[1,174]},{10:[1,175]},{63:[1,176]},o($VG,[2,12]),o($VG,[2,13]),{20:[2,78],72:[1,177]},o($V_,[2,106]),o($V_,[2,108],{48:[1,178]}),o($V3,[2,102]),o($VF,[2,16]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),{10:[1,179]},{10:[1,180]},{20:[2,118]},{20:[2,119]},{20:[2,120]},{20:[2,121]},{20:[2,79],83:$VH,85:$VI,86:$VJ,87:$VK},{52:[1,181],83:$VH,85:$VI,86:$VJ,87:$VK},{52:[1,182],83:$VH,85:$VI,86:$VJ,87:$VK},{52:[1,183],83:$VH,85:$VI,86:$VJ,87:$VK},{52:[1,184],83:$VH,85:$VI,86:$VJ,87:$VK},{51:[1,185]},{2:$V5,8:$Vo,10:$V7,15:[1,186],16:151,17:$V1,18:$V2,19:152,26:187,29:140,30:141,31:142,32:143,33:144,34:145,35:146,36:147,37:148,38:149,42:150,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($Vp,[2,19]),{20:[1,188]},{20:[1,189]},{20:[1,190]},o($Vp,[2,66]),o($Vp,[2,67]),o($Vp,[2,68]),o($Vp,[2,69]),o($Vp,[2,70]),o($Vp,[2,71]),o($Vp,[2,72]),o($Vp,[2,73]),o($Vp,[2,74]),o($Vp,[2,75]),{20:[1,191]},{20:$Vq,48:$Vr},o($Vp,[2,89]),{10:$Vt,51:$Vu,79:$Vv,82:$Vw,84:192,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,84:193,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,84:194,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,84:195,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,89:196,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,89:197,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,92:198,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,92:199,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,92:200,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,96:201,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,96:202,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,98:203,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{10:$Vt,51:$Vu,79:$Vv,82:$Vw,98:204,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VY,[2,144]),o($VY,[2,145]),o($VY,[2,146]),o($VY,[2,147]),{52:[1,205],83:$VH,85:$VI,86:$VJ,87:$VK},{51:[1,206]},{51:[1,207]},{67:[1,208]},{10:$VC,73:209},{10:$Vt,49:210,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{51:[1,211]},{51:[1,212]},{20:[2,90]},{20:[2,91]},{14:$Vs,53:213},{14:$Vs,53:214},{10:$Vt,49:215,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o([2,8,10,15,17,18,43,50,54,55,56,57,58,59,60,61,62,68,75,76,77,78,79,82],[2,104]),o($Vp,[2,18]),o($Vp,[2,63]),o($Vp,[2,64]),o($Vp,[2,65]),{10:$Vt,49:216,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VL,[2,126],{88:$VM,90:$VN}),o($VL,[2,127],{88:$VM,90:$VN}),o($VL,[2,128],{88:$VM,90:$VN}),o($VL,[2,129],{88:$VM,90:$VN}),o($VO,[2,131],{91:$VP,93:$VQ,94:$VR}),o($VO,[2,132],{91:$VP,93:$VQ,94:$VR}),o($VS,[2,134],{79:$VT,95:$VU}),o($VS,[2,135],{79:$VT,95:$VU}),o($VS,[2,136],{79:$VT,95:$VU}),o($VV,[2,138],{97:$VW,99:$VX}),o($VV,[2,139],{97:$VW,99:$VX}),o($VY,[2,141]),o($VY,[2,142]),o($VZ,[2,149]),o($V$,$V01,{64:217,74:218,46:219,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl}),o($V$,$V01,{74:218,46:219,64:220,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl}),{51:[1,221]},o($V_,[2,105]),o($V_,[2,107],{83:$VH,85:$VI,86:$VJ,87:$VK}),o($V$,$V01,{74:218,46:219,64:222,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl}),o($V$,$V01,{74:218,46:219,64:223,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl}),o($VG,[2,81],{54:[1,224]}),o($VG,[2,84]),{52:[1,225],83:$VH,85:$VI,86:$VJ,87:$VK},{20:[1,226],83:$VH,85:$VI,86:$VJ,87:$VK},{52:[1,227],72:$V11},o($V$,[2,110]),{10:$Vt,49:229,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{52:[1,230],72:$V11},o($V$,$V01,{74:218,46:219,64:232,68:[1,231],75:$Vi,76:$Vj,77:$Vk,78:$Vl}),{52:[1,233],72:$V11},{52:[1,234],72:$V11},{14:$Vs,32:236,50:$V8,53:235},{20:[1,237]},{10:$Vt,49:238,51:$Vu,79:$Vv,82:$Vw,84:98,89:99,92:100,96:101,98:102,100:105,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{14:[1,240],20:$V21,65:239},o($V$,$V01,{46:219,74:242,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl}),o($V$,[2,111],{83:$VH,85:$VI,86:$VJ,87:$VK}),{14:[1,244],20:$V31,53:243},o($VD,$VE,{69:[1,246]}),{52:[1,247],72:$V11},{20:$V31},{20:$V21},o($VG,[2,82]),o($VG,[2,83]),o($VG,[2,85]),{52:[1,248],83:$VH,85:$VI,86:$VJ,87:$VK},o($Vp,[2,92]),{2:$V5,8:$Vo,10:$V7,15:[1,249],16:263,17:$V1,18:$V2,19:264,27:250,28:251,29:252,30:254,31:255,32:256,33:257,34:258,35:259,36:260,37:261,42:262,43:$V41,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($VG,[2,100]),o($V$,[2,109]),o($Vp,[2,94]),{2:$V5,8:$Vo,10:$V7,15:[1,265],16:151,17:$V1,18:$V2,19:152,25:138,26:139,29:140,30:141,31:142,32:143,33:144,34:145,35:146,36:147,37:148,38:149,42:150,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($VG,[2,99]),{70:[1,266]},{14:[1,268],53:267},{14:$Vs,53:269},o($Vp,[2,93]),{2:$V5,8:$Vo,10:$V7,15:[1,270],16:263,17:$V1,18:$V2,19:264,28:271,29:252,30:254,31:255,32:256,33:257,34:258,35:259,36:260,37:261,42:262,43:$V41,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($V51,[2,21]),{20:[1,272]},o($V51,[2,51]),{20:[1,273]},{20:[1,274]},o($V51,[2,54]),o($V51,[2,55]),o($V51,[2,56]),o($V51,[2,57]),o($V51,[2,58]),o($V51,[2,59]),o($V51,[2,60]),o($V51,[2,61]),o($V51,[2,62]),o($Vp,[2,95]),{71:[1,275]},o($Vp,[2,97]),{2:$V5,8:$Vo,10:$V7,15:[1,276],16:151,17:$V1,18:$V2,19:152,25:138,26:139,29:140,30:141,31:142,32:143,33:144,34:145,35:146,36:147,37:148,38:149,42:150,44:38,45:39,46:54,50:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,82:$Vn},o($VG,[2,86]),o($Vp,[2,103]),o($V51,[2,20]),o($V51,[2,50]),o($V51,[2,52]),o($V51,[2,53]),{52:[1,277]},o($Vp,[2,98]),{14:$Vs,53:278},o($Vp,[2,96])],
defaultActions: {9:[2,1],38:[2,76],39:[2,77],83:[2,122],84:[2,123],86:[2,124],87:[2,125],128:[2,118],129:[2,119],130:[2,120],131:[2,121],181:[2,90],182:[2,91]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var contadorE = 0;
        var contadorT = 0;
        var lista_error  = new Array();
        var lista_tokens = new Array();
        
          
    //EXPRESIONES
    const Aritmetica         = require('./Expresiones/Aritmetica');
    const Contador           = require('./Expresiones/Contador');
    const Identificador      = require('./Expresiones/Identificador');
    const Logica             = require('./Expresiones/Logica');
    const Nega_Contador      = require('./Expresiones/Nega_Contador');
    const Parentesis         = require('./Expresiones/Parentesis');
    const Primitivo          = require('./Expresiones/Primitivo');
    const Relacional         = require('./Expresiones/Relacional');
    //INSTRUCCIONES
    const Asignacion         = require('./Instrucciones/Asignacion');
    const Break              = require('./Instrucciones/Break');
    const Call_Function      = require('./Instrucciones/Call_Function');
    const Clase              = require('./Instrucciones/Clase');
    const Comentario         = require('./Instrucciones/Comentario');
    const Continue           = require('./Instrucciones/Continue');
    const Declaracion        = require('./Instrucciones/Declaracion');
    const Do_While           = require('./Instrucciones/Do_While');
    const Excepcion          = require('./Instrucciones/Excepcion');
    const EmptyM             = require('./Instrucciones/EmptyM');
    const EmptyF             = require('./Instrucciones/EmptyF');
    const EmptyFM            = require('./Instrucciones/EmptyFM');
    const EmptyC             = require('./Instrucciones/EmptyC');
    const EmptyI             = require('./Instrucciones/EmptyI');
    const For                = require('./Instrucciones/For');
    const Funcion_Main       = require('./Instrucciones/Funcion_Main');
    const Funcion            = require('./Instrucciones/Funcion');
    const If                 = require('./Instrucciones/If');
    const Interface          = require('./Instrucciones/Interface');
    const Lista_ID           = require('./Instrucciones/Lista_ID');
    const Main               = require('./Instrucciones/Main');
    const Metodo             = require('./Instrucciones/Metodo');
    const Parametros         = require('./Instrucciones/Parametros');
    const Print              = require('./Instrucciones/Print');
    const Return             = require('./Instrucciones/Return');
    const While              = require('./Instrucciones/While');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Comentario Simple",yy_.yytext]);
        return 18;
break;
case 2:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Comentario Multiple",yy_.yytext]);
        return 17;
        
break;
case 3:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Int",yy_.yytext]);
        return 75;
        
break;
case 4:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Double",yy_.yytext]);
        return 78;
        
break;
case 5:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Char",yy_.yytext]);
        return 76;
        
break;
case 6:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Boolean",yy_.yytext]);
        return 77;
        
break;
case 7:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"String",yy_.yytext]);
        return 68;
        
break;
case 8:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Static",yy_.yytext]);
        return 66;
        
break;
case 9:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Args",yy_.yytext]);
        return 71;
        
break;
case 10:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Void",yy_.yytext]);
        return 63;
        
break;
case 11:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Main",yy_.yytext]);
        return 67;
        
break;
case 12:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"If",yy_.yytext]);
        return 50;
        
break;
case 13:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Break",yy_.yytext]);
        return 58;
        
break;
case 14:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Continue",yy_.yytext]);
        return 59;
        
break;
case 15:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Return",yy_.yytext]);
        return 60;
        
break;
case 16:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Else",yy_.yytext]);
        return 54;
        
break;
case 17:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"True",yy_.yytext]);
        return 104;
        
break;
case 18:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"False",yy_.yytext]);
        return 105;
        
break;
case 19:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"For",yy_.yytext]);
        return 57;
        
break;
case 20:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Public",yy_.yytext]);
        return 8;
        
break;
case 21:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Class",yy_.yytext]);
        return 9;
        
break;
case 22:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Interface",yy_.yytext]);
        return 12;
        
break;
case 23:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"While",yy_.yytext]);
        return 55;
        
break;
case 24:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Do",yy_.yytext]);
        return 56;
        
break;
case 25:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Print",yy_.yytext]);
        return 61;
        
break;
case 26:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Print",yy_.yytext]);
        return 62;
        
break;
case 27:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"And",yy_.yytext]);
        return 93;
        
break;
case 28:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Or",yy_.yytext]);
        return 94;
        
break;
case 29:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Diferencia",yy_.yytext]);
        return 90;
        
break;
case 30:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Not",yy_.yytext]);
        return 101;
        
break;
case 31:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Xor",yy_.yytext]);
        return 91;
        
break;
case 32:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MenIq",yy_.yytext]);
        return 87;
        
break;
case 33:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MayIq",yy_.yytext]);
        return 86;
        
break;
case 34:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Igualdad",yy_.yytext]);
        return 88;
        
break;
case 35:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MenQ",yy_.yytext]);
        return 85;
        
break;
case 36:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"MayQ",yy_.yytext]);
        return 83;
        
break;
case 37:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Igual",yy_.yytext]);
        return 48;
        
break;
case 38:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Punto_Coma",yy_.yytext]);
        return 20;
        
break;
case 39:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Coma",yy_.yytext]);
        return 72;
        
break;
case 40:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Dos Puntos",yy_.yytext]);
        return 's_dpuntos';
        
break;
case 41:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Punto",yy_.yytext]);
        return '.';
        
break;
case 42:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Incremento",yy_.yytext]);
        return 80;
        
break;
case 43:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Decremento",yy_.yytext]);
        return 81;
        
break;
case 44:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Por",yy_.yytext]);
        return 97;
        
break;
case 45:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Div",yy_.yytext]);
        return 99;
        
break;
case 46:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Menos",yy_.yytext]);
        return 79;
        
break;
case 47:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"Mas",yy_.yytext]);
        return 95;
        
break;
case 48:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"ParA",yy_.yytext]);
        return 51;
        
break;
case 49:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"ParC",yy_.yytext]);
        return 52;
        
break;
case 50:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"CorcA",yy_.yytext]);
        return 69;
        
break;
case 51:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"CorcC",yy_.yytext]);
        return 70;
        
break;
case 52:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"LlaveA",yy_.yytext]);
        return 14;
        
break;
case 53:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"LlaveC",yy_.yytext]);
        return 15;
        
break;
case 54:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexNumero",yy_.yytext]);
        return 82;
        
break;
case 55:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexString",yy_.yytext]);
        return 103;
        
break;
case 56:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexChar",yy_.yytext]);
        return 102;
        
break;
case 57:
        contadorT++;        
        lista_tokens.push([contadorT,yy_.yylloc.first_line,yy_.yylloc.first_column,"RegexID",yy_.yytext]);
        return 10;
        
break;
case 58:return 5;
break;
case 59:                         
                contadorE++;
                lista_error.push([contadorE,yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,"Lexico"]);
        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:static\b)/i,/^(?:args\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:System\.out\.print\b)/i,/^(?:System\.out\.println\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:[a-zA-Z]+[a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorJS;
exports.Parser = analizadorJS.Parser;
exports.parse = function () { return analizadorJS.parse.apply(analizadorJS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}