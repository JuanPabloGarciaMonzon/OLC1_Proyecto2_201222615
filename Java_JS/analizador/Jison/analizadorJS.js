/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorJS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,8],$V3=[5,8,16,17],$V4=[2,5,8,10,13,16,17,45,50,51,52,53,54,55,56,57,63,70,71,72,73,76],$V5=[1,49],$V6=[1,48],$V7=[1,37],$V8=[1,41],$V9=[1,42],$Va=[1,43],$Vb=[1,44],$Vc=[1,45],$Vd=[1,46],$Ve=[1,47],$Vf=[1,39],$Vg=[1,40],$Vh=[1,55],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[1,38],$Vn=[2,8,10,13,16,17,45,50,51,52,53,54,55,56,57,63,70,71,72,73,76],$Vo=[2,63],$Vp=[1,64],$Vq=[1,72],$Vr=[1,86],$Vs=[1,85],$Vt=[1,87],$Vu=[1,82],$Vv=[1,83],$Vw=[1,88],$Vx=[1,89],$Vy=[1,90],$Vz=[1,91],$VA=[1,99],$VB=[10,46,76,91,96,97,98,99,100],$VC=[2,95],$VD=[1,123],$VE=[1,126],$VF=[1,127],$VG=[1,128],$VH=[1,129],$VI=[19,47,68,77,79,80,81],$VJ=[1,130],$VK=[1,131],$VL=[19,47,68,77,79,80,81,82,84],$VM=[1,132],$VN=[1,133],$VO=[1,134],$VP=[19,47,68,77,79,80,81,82,84,85,87,88],$VQ=[1,135],$VR=[1,136],$VS=[19,47,68,77,79,80,81,82,84,85,87,88,89,91],$VT=[1,137],$VU=[1,138],$VV=[19,47,68,77,79,80,81,82,84,85,87,88,89,91,92,94],$VW=[19,47,68,74,75,77,79,80,81,82,84,85,87,88,89,91,92,94],$VX=[19,68],$VY=[2,8,10,13,16,17,45,49,50,51,52,53,54,55,56,57,63,70,71,72,73,76],$VZ=[1,196],$V_=[47,68],$V$=[2,8,10,13,16,17,45,50,51,52,53,54,56,57,63,70,71,72,73,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"I":3,"S":4,"EOF":5,"SD":6,"CLASE_INT":7,"r_public":8,"r_class":9,"identificador":10,"s_llave_abre":11,"L_INSTRUCCIONES":12,"s_llave_cierra":13,"r_interface":14,"COMENTARIO":15,"coment_m":16,"coment_s":17,"PANICO":18,"s_pyc":19,"INSTRUCCIONES":20,"FORD":21,"CONTADOR":22,"PRINT":23,"SENTENCIA_IF":24,"SENTENCIA_WHILE":25,"SENTENCIA_DOWHILE":26,"SENTENCIA_FOR":27,"BREAK":28,"CONTINUE":29,"RETURN":30,"METODO":31,"FUNCION":32,"FUNCION_MAIN":33,"CALL_F":34,"L_INSTRUCCIONES_F":35,"INSTRUCCIONES_F":36,"L_INSTRUCCIONES_M":37,"INSTRUCCIONES_M":38,"DECLARACION":39,"ASIGNACION":40,"TIPO":41,"LISTAID":42,"=":43,"E":44,"r_if":45,"(":46,")":47,"BLOQUE_FUNCION":48,"r_else":49,"r_while":50,"r_do":51,"r_for":52,"r_break":53,"r_continue":54,"r_return":55,"r_print":56,"r_println":57,"r_void":58,"BLOQUE_METODO":59,"PARAMETROS":60,"r_static":61,"r_main":62,"r_string":63,"[":64,"]":65,"r_args":66,"BLOQUE":67,"s_coma":68,"PARAM":69,"r_int":70,"r_char":71,"r_boolean":72,"r_double":73,"s_inc":74,"s_dec":75,"NUMBER":76,"s_mayq":77,"E2":78,"s_menq":79,"s_mayiq":80,"s_meniq":81,"s_igualdad":82,"E3":83,"s_diferencia":84,"s_xor":85,"E4":86,"s_and":87,"s_or":88,"s_mas":89,"E5":90,"s_menos":91,"s_por":92,"E6":93,"s_div":94,"E7":95,"s_not":96,"char":97,"cadena":98,"r_true":99,"r_false":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"r_public",9:"r_class",10:"identificador",11:"s_llave_abre",13:"s_llave_cierra",14:"r_interface",16:"coment_m",17:"coment_s",19:"s_pyc",43:"=",45:"r_if",46:"(",47:")",49:"r_else",50:"r_while",51:"r_do",52:"r_for",53:"r_break",54:"r_continue",55:"r_return",56:"r_print",57:"r_println",58:"r_void",61:"r_static",62:"r_main",63:"r_string",64:"[",65:"]",66:"r_args",68:"s_coma",70:"r_int",71:"r_char",72:"r_boolean",73:"r_double",74:"s_inc",75:"s_dec",76:"NUMBER",77:"s_mayq",79:"s_menq",80:"s_mayiq",81:"s_meniq",82:"s_igualdad",84:"s_diferencia",85:"s_xor",87:"s_and",88:"s_or",89:"s_mas",91:"s_menos",92:"s_por",94:"s_div",96:"s_not",97:"char",98:"cadena",99:"r_true",100:"r_false"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,6],[7,6],[7,1],[15,1],[15,1],[18,2],[18,2],[12,2],[12,1],[20,2],[20,2],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[35,2],[35,1],[37,2],[37,1],[38,2],[38,2],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[36,2],[36,2],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[21,1],[21,1],[39,2],[40,3],[40,1],[24,5],[24,7],[24,7],[25,5],[26,7],[27,9],[28,2],[29,2],[30,3],[23,4],[23,4],[31,6],[32,7],[33,11],[33,8],[34,7],[67,2],[67,3],[59,2],[59,3],[48,2],[48,3],[42,3],[42,1],[60,3],[60,1],[69,2],[41,1],[41,1],[41,1],[41,1],[41,1],[22,2],[22,2],[22,2],[22,2],[44,3],[44,3],[44,3],[44,3],[44,1],[78,3],[78,3],[78,1],[83,3],[83,3],[83,3],[83,1],[86,3],[86,3],[86,1],[90,3],[90,3],[90,1],[93,2],[93,2],[93,2],[93,2],[93,1],[95,3],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$ = $$[$0]; 
break;
case 3: case 12: case 30: case 32:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 13: case 31: case 33: case 87: case 89:
this.$ = [$$[$0]];
break;
case 5: case 6:
this.$ = new Clase.default($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 10:
console.log('Este es un error sintáctico: ' +   yytext   + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 11:
console.log('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 14: case 15: case 16: case 34: case 35: case 36: case 46: case 47: case 48: case 81: case 83: case 85:
this.$ = $$[$0-1];
break;
case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 29: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 45: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 58: case 59: case 60: case 63:
this.$ = $$[$0];
break;
case 61:
 this.$ = new Declaracion.default($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 62:
this.$ = new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
 this.$ = new If.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 65: case 66:
 this.$ = new If.default($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0]); 
break;
case 67:
 this.$ = new While.default($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 68:
 this.$ = new Do_While.default($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 69:
this.$ = new For.default($$[$0-6], $$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 70:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 71:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 72:
this.$ = new Return.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73: case 74:
 this.$ = new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 75:
this.$ = new Metodo.default($$[$0-3],$$[$01], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 76:
this.$ = new Funcion.default($$[$0-5],$$[$0-4],$$[$0-2],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 77:
this.$ = new Main.default($$[$0], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 78:
this.$ = new Funcion_Main.default($$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 79:
this.$ = new Call_Function.default($$[$0-4],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 86: case 88:
$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 90:
this.$ = new Parametros.default($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 91: case 92: case 93: case 94: case 95:
this.$ = $$[$0]
break;
case 96: case 98:
this.$ = new Aritmetica.default('++', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 97: case 99:
this.$ = new Aritmetica.default('--', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 100:
this.$ = new Relacional.default($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$ = new Relacional.default($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$ = new Relacional.default($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$ = new Relacional.default($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 104: case 107: case 111: case 114: case 117: case 122:
this.$ =$$[$0]
break;
case 105:
this.$ = new Relacional.default($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Relacional.default($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Logica.default($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$ = new Logica.default($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Logica.default($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Aritmetica.default('+', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 113:
this.$ = new Aritmetica.default('-', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 115:
  this.$ = new Aritmetica.default('*', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 116:
  this.$ = new Aritmetica.default('/', _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2], $$[$0]);
break;
case 118:
 this.$ = new Aritmetica.default('-', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 119:
  this.$ = new Logica.default('!', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 120:
  this.$ = new Aritmetica.default('++', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 121:
  this.$ = new Aritmetica.default('--', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 123:
 this.$ = new Parentesis.default($$[$0-2],$$[$0-1],$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 124:
 this.$ = new Identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 125: case 126: case 127: case 128: case 129:
this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,15:6,16:$V1,17:$V2},{1:[3]},{5:[1,9]},{5:[2,2],7:10,8:$V0,15:6,16:$V1,17:$V2},o($V3,[2,4]),{9:[1,11],14:[1,12]},o($V3,[2,7]),o($V4,[2,8]),o($V4,[2,9]),{1:[2,1]},o($V3,[2,3]),{10:[1,13]},{10:[1,14]},{11:[1,15]},{11:[1,16]},{2:$V5,8:$V6,10:$V7,12:17,15:33,16:$V1,17:$V2,18:34,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:30,33:31,34:32,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},{2:$V5,8:$V6,10:$V7,12:56,15:33,16:$V1,17:$V2,18:34,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:30,33:31,34:32,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},{2:$V5,8:$V6,10:$V7,13:[1,57],15:33,16:$V1,17:$V2,18:34,20:58,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:30,33:31,34:32,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},o($Vn,[2,13]),{19:[1,59]},{19:[1,60]},{19:[1,61]},o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),o($Vn,[2,28]),o($Vn,[2,29]),{19:[2,59]},{19:[2,60]},{19:$Vo,43:$Vp,74:[1,62],75:[1,63]},{74:[1,65],75:[1,66]},{46:[1,67]},{46:[1,68]},{46:[1,69]},{46:[1,70]},{11:$Vq,48:71},{46:[1,73]},{19:[1,74]},{19:[1,75]},{10:$Vr,44:76,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{41:93,58:[1,92],61:[1,94],63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{13:[1,96],19:[1,95]},{10:$VA,40:98,42:97},o($VB,[2,91]),o($VB,[2,92]),o($VB,[2,93]),o($VB,[2,94]),o($VB,$VC),{2:$V5,8:$V6,10:$V7,13:[1,100],15:33,16:$V1,17:$V2,18:34,20:58,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:30,33:31,34:32,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},o($V3,[2,5]),o($Vn,[2,12]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),{19:[2,96]},{19:[2,97]},{10:$Vr,44:101,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{19:[2,98]},{19:[2,99]},{10:$Vr,44:102,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,44:103,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,44:104,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,44:105,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{50:[1,106]},{2:$V5,8:$VD,10:$V7,13:[1,107],15:121,16:$V1,17:$V2,18:122,21:110,22:111,23:112,24:113,25:114,26:115,27:116,28:117,29:118,30:119,34:120,35:108,36:109,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},{10:$VA,21:124,39:35,40:36,41:50,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($Vn,[2,70]),o($Vn,[2,71]),{19:[1,125],77:$VE,79:$VF,80:$VG,81:$VH},o($VI,[2,104],{82:$VJ,84:$VK}),o($VL,[2,107],{85:$VM,87:$VN,88:$VO}),o($VP,[2,111],{89:$VQ,91:$VR}),o($VS,[2,114],{92:$VT,94:$VU}),o($VV,[2,117]),{10:$Vr,46:$Vs,76:$Vt,95:139,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,95:140,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VV,[2,122],{74:[1,141],75:[1,142]}),{10:$Vr,44:143,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VW,[2,124]),o($VW,[2,125]),o($VW,[2,126]),o($VW,[2,127]),o($VW,[2,128]),o($VW,[2,129]),{10:[1,144]},{10:[1,145]},{58:[1,146]},o($Vn,[2,10]),o($Vn,[2,11]),{19:[2,61],68:[1,147]},o($VX,[2,87]),o($VX,$Vo,{43:$Vp}),o($V3,[2,6]),o($VX,[2,62],{77:$VE,79:$VF,80:$VG,81:$VH}),{47:[1,148],77:$VE,79:$VF,80:$VG,81:$VH},{47:[1,149],77:$VE,79:$VF,80:$VG,81:$VH},{47:[1,150],77:$VE,79:$VF,80:$VG,81:$VH},{47:[1,151],77:$VE,79:$VF,80:$VG,81:$VH},{46:[1,152]},o($VY,[2,84]),{2:$V5,8:$VD,10:$V7,13:[1,153],15:121,16:$V1,17:$V2,18:122,21:110,22:111,23:112,24:113,25:114,26:115,27:116,28:117,29:118,30:119,34:120,36:154,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},o($Vn,[2,31]),{19:[1,155]},{19:[1,156]},{19:[1,157]},o($Vn,[2,49]),o($Vn,[2,50]),o($Vn,[2,51]),o($Vn,[2,52]),o($Vn,[2,53]),o($Vn,[2,54]),o($Vn,[2,55]),o($Vn,[2,56]),o($Vn,[2,57]),o($Vn,[2,58]),{58:[1,158]},{19:[1,159]},o($Vn,[2,72]),{10:$Vr,46:$Vs,76:$Vt,78:160,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,78:161,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,78:162,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,78:163,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,83:164,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,83:165,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,86:166,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,86:167,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,86:168,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,90:169,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,90:170,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,91:$Vu,93:171,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{10:$Vr,46:$Vs,76:$Vt,91:$Vu,93:172,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VV,[2,118]),o($VV,[2,119]),o($VV,[2,120]),o($VV,[2,121]),{47:[1,173],77:$VE,79:$VF,80:$VG,81:$VH},{46:[1,174]},{46:[1,175]},{62:[1,176]},{10:$VA,40:177},{19:[2,73]},{19:[2,74]},{11:$Vq,48:178},{11:$Vq,48:179},{10:$Vr,44:180,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VY,[2,85]),o($Vn,[2,30]),o($Vn,[2,46]),o($Vn,[2,47]),o($Vn,[2,48]),{10:[1,181]},{10:$Vr,44:182,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VI,[2,100],{82:$VJ,84:$VK}),o($VI,[2,101],{82:$VJ,84:$VK}),o($VI,[2,102],{82:$VJ,84:$VK}),o($VI,[2,103],{82:$VJ,84:$VK}),o($VL,[2,105],{85:$VM,87:$VN,88:$VO}),o($VL,[2,106],{85:$VM,87:$VN,88:$VO}),o($VP,[2,108],{89:$VQ,91:$VR}),o($VP,[2,109],{89:$VQ,91:$VR}),o($VP,[2,110],{89:$VQ,91:$VR}),o($VS,[2,112],{92:$VT,94:$VU}),o($VS,[2,113],{92:$VT,94:$VU}),o($VV,[2,115]),o($VV,[2,116]),o($VW,[2,123]),{41:186,47:[1,183],60:184,63:$Vh,69:185,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{41:186,60:187,63:$Vh,69:185,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{46:[1,188]},o($VX,[2,86]),o($Vn,[2,64],{49:[1,189]}),o($Vn,[2,67]),{47:[1,190],77:$VE,79:$VF,80:$VG,81:$VH},{46:[1,191]},{19:[1,192],77:$VE,79:$VF,80:$VG,81:$VH},{11:[1,194],59:193},{47:[1,195],68:$VZ},o($V_,[2,89]),{10:$Vr,44:197,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{47:[1,198],68:$VZ},{41:186,60:200,63:[1,199],69:185,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{11:$Vq,24:202,45:$V8,48:201},{19:[1,203]},{41:186,60:184,63:$Vh,69:185,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{10:$Vr,44:204,46:$Vs,76:$Vt,78:77,83:78,86:79,90:80,91:$Vu,93:81,95:84,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($Vn,[2,75]),{2:$V5,8:$VD,10:$V7,13:[1,205],15:218,16:$V1,17:$V2,18:219,21:208,22:209,23:210,24:211,25:212,26:213,27:214,28:215,29:216,34:217,37:206,38:207,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},{19:[1,220]},{41:186,63:$Vh,69:221,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($V_,[2,90],{77:$VE,79:$VF,80:$VG,81:$VH}),{11:$Vq,48:222},o($VB,$VC,{64:[1,223]}),{47:[1,224],68:$VZ},o($Vn,[2,65]),o($Vn,[2,66]),o($Vn,[2,68]),{47:[1,225],77:$VE,79:$VF,80:$VG,81:$VH},o($Vn,[2,82]),{2:$V5,8:$VD,10:$V7,13:[1,226],15:218,16:$V1,17:$V2,18:219,21:208,22:209,23:210,24:211,25:212,26:213,27:214,28:215,29:216,34:217,38:227,39:35,40:36,41:50,45:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Vf,57:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm},o($V$,[2,33]),{19:[1,228]},{19:[1,229]},{19:[1,230]},o($V$,[2,37]),o($V$,[2,38]),o($V$,[2,39]),o($V$,[2,40]),o($V$,[2,41]),o($V$,[2,42]),o($V$,[2,43]),o($V$,[2,44]),o($V$,[2,45]),o($Vn,[2,79]),o($V_,[2,88]),o($Vn,[2,76]),{65:[1,231]},{11:$Vq,48:232},{11:$Vq,48:233},o($Vn,[2,83]),o($V$,[2,32]),o($V$,[2,34]),o($V$,[2,35]),o($V$,[2,36]),{66:[1,234]},o($Vn,[2,78]),o($Vn,[2,69]),{47:[1,235]},{11:$Vq,48:236},o($Vn,[2,77])],
defaultActions: {9:[2,1],35:[2,59],36:[2,60],62:[2,96],63:[2,97],65:[2,98],66:[2,99],148:[2,73],149:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var lista=[];

           
    const Aritmetica         = require('./Expresiones/Aritmetica');
    const Identificador      = require('./Expresiones/Identificador');
    const Logica             = require('./Expresiones/Logica');
    const Parentesis         = require('./Expresiones/Parentesis');
    const Primitivo          = require('./Expresiones/Primitivo');
    const Relacional         = require('./Expresiones/Relacional');

    const Asignacion         = require('./Instrucciones/Asignacion');
    const Break              = require('./Instrucciones/Break');
    const Call_Function      = require('./Instrucciones/Call_Function');
    const Clase              = require('./Instrucciones/Clase');

    const Continue           = require('./Instrucciones/Continue');
    const Declaracion        = require('./Instrucciones/Declaracion');
    const Do_While           = require('./Instrucciones/Do_While');
    const For                = require('./Instrucciones/For');
    const Funcion_Main       = require('./Instrucciones/Funcion_Main');
    const Funcion            = require('./Instrucciones/Funcion');
    const If                 = require('./Instrucciones/If');
    const Interface          = require('./Instrucciones/Interface');
    const Main               = require('./Instrucciones/Main');
    const Metodo             = require('./Instrucciones/Metodo');
    const Parametros         = require('./Instrucciones/Parametros');
    const Print              = require('./Instrucciones/Print');
    const While              = require('./Instrucciones/While');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 17//{ yy_.yytext = yy_.yytext.substr(2); return 17; }				//	 // comentario simple línea
break;
case 2:return 16//{ yy_.yytext = yy_.yytext.substr(2,yy_.yyleng-3); return 16; } //	// comentario multiple líneas
break;
case 3:return 70;
break;
case 4:return 73;
break;
case 5:return 71;
break;
case 6:return 'r_bool';
break;
case 7:return 63;
break;
case 8:return 61;
break;
case 9:return 66;
break;
case 10:return 58;
break;
case 11:return 62;
break;
case 12:return 45;
break;
case 13:return 'r_switch';
break;
case 14:return 'r_case';
break;
case 15:return 'r_default';
break;
case 16:return 53;
break;
case 17:return 54;
break;
case 18:return 55;
break;
case 19:return 49;
break;
case 20:return 99;
break;
case 21:return 100;
break;
case 22:return 52;
break;
case 23:return 8;
break;
case 24:return 9;
break;
case 25:return 14;
break;
case 26:return 50;
break;
case 27:return 51;
break;
case 28:return 56;
break;
case 29:return 57;
break;
case 30:return 87;
break;
case 31:return 88;
break;
case 32:return 84;
break;
case 33:return 96;
break;
case 34:return 85;
break;
case 35:return 81;
break;
case 36:return 80;
break;
case 37:return 82;
break;
case 38:return 79;
break;
case 39:return 77;
break;
case 40:return 43;
break;
case 41:return 19;
break;
case 42:return 68;
break;
case 43:return 's_dpuntos';
break;
case 44:return '.';
break;
case 45:return 74;
break;
case 46:return 75;
break;
case 47:return 92;
break;
case 48:return 94;
break;
case 49:return 91;
break;
case 50:return 89;
break;
case 51:return 46;
break;
case 52:return 47;
break;
case 53:return 64;
break;
case 54:return 65;
break;
case 55:return 11;
break;
case 56:return 13;
break;
case 57:return 76;
break;
case 58:return 98;
break;
case 59:return 97;
break;
case 60:return 10;
break;
case 61:return 5;
break;
case 62: 
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        const Error_Table         = require('./Error_Table');
                        var error = new Error_Table.default(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column, "lexico");
                        var edad_default = error.errorTable();
                        console.log(edad_default);
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:static\b)/i,/^(?:args\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:System\.out\.print\b)/i,/^(?:System\.out\.println\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:[a-zA-Z]+[a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorJS;
exports.Parser = analizadorJS.Parser;
exports.parse = function () { return analizadorJS.parse.apply(analizadorJS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}